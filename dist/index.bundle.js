(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,'* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nhtml {\n    font-family:\'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;  \n   \n}\n\n:root {\n    --blue: #14EBE7;\n    --yellow :#ebe98c;\n    --purple: #be09be;\n    --background: blanchedalmond;\n}\n                                                        /* Todo form  */\n.todoFormContainer{\n    background-color: var(--blue);\n    border-radius: 10px;\n    display: flex; \n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0.3rem;\n}\n\n\n.formHeader {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin: 0.3rem;\n}\n.todoFormContainer h2 {\n    margin-left: .6rem;\n    color: white;\n    \n    padding: 0;\n}\n.closeForm {\n    border-style: none;\n   background-color: inherit;\n    cursor: pointer;\n    margin: .3rem;\n}\n.closeForm:hover {\n    color: red;\n}\n\n.formUl{\n    margin: 0;\n    padding: 0;\n    list-style: none; \n}\n.formLi{\n    padding:.2rem;\n}\ntextarea{\n    width: 300px;\n    height: 100px;\n    border: none;\n    outline-style: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\nlabel {\n    font-weight: 100;\n    margin: .3rem;\n}\ninput{\n    outline-style: none;\n    border: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\n.dueDateInput {\n\n    font-weight: 200;\n    \n}\n.submit {\n  border-color: rgb(95, 179, 10);\n  box-shadow: none;\n  border-style: none;\n  border: 1px solid  rgb(95, 179, 10);\n  border-radius: 2px;\n  padding: 0 1rem;\n  color:  rgb(95, 179, 10);\n}\n\n\n.submit:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n.formLi_footer {\n   display: flex;\n   justify-content: space-between;\n}\n.priority{\n    border-radius: 2px;\n    padding: 0;\n    font-size: .7rem;\n    color:  rgb(95, 179, 10);\n    border-color: rgb(95, 179, 10);;\n}\n\n\n/* \n///////////////\ntodoDiv styling   \n//////////////\n*/\n.todoDiv {\n    background-color: var(--blue);\n    display: flex;\n    width: 98%;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.3rem;\n    padding-left: 0;\n    margin:0.3rem;\n    height: 2rem; \n}\n.todoDiv:hover {\n    transform: scale(1.01);\n    box-shadow: 0px 0px 2px var(--blue);  \n}\n\n.todoDiv.checked {\n    filter: blur(1px);\n    color: rgb(120, 125, 144);\n    text-decoration: line-through;\n    \n}\n.todoDivRight{\n    display: flex;\n    gap: 1rem;\n}\n.todoDivLeft {\n    display: flex;\n    gap: 1rem;\n    height: 2rem;\n}\n.todoDivCenter {\n    flex:1;\n}\n\n                                                                /* todoDetails */   \n    .todoDetails {\n        background-color: var(--blue);\n        border-radius: 3px;\n        border:1px solid white;\n        font-family: inherit;\n        font-weight: 300;\n        padding: 0.2rem;\n        cursor: pointer;\n        \n    }\n    .todoDetails:hover {\n        background-color: var(--yellow);\n        color: var(--purple);\n    }\n\n                                                                /* checkbox styling */\n\n\n.todoCheckMark {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--blue);\n    border-radius: 3px;\n    border: 1px solid rgb(255, 255, 255);\n}\n.todoCheckMark:hover {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--yellow);\n    border-radius: 3px;\n    cursor: pointer;\n   \n}\n.todoCheckMark:hover::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n\n}\n\n.todoCheckMark:checked::after{\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--yellow);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n\n\n\n.todoPriority{\n    \n    height: 100%;\n    width: 0.3rem;\n}\n.todoPriority.low {\n    background-color: green;\n}\n.todoPriority.med {\n    background-color: yellow;\n}\n.todoPriority {\n    background-color: red;\n}\n\n.todoTitle,\n.todoDescription,\n.dueDate {\n    margin: 0;\n    margin-left: 0.3rem;\n    font-size: 1rem;\n    font-weight: 200;\n    width: 3rem;\n}\n.todoTitle {\n    width: 100%;\n}\n.dueDate {\n    align-self: center;\n}\n.todoEdit {\n    height: .5rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.todoDelete {\n    height: 1rem;\n    width: 1rem;\n    cursor: pointer;\n}\n.todoEdit::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f044";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.todoEdit:hover::before { \n    color: var(--yellow);\n}\n.todoDelete:hover::before {\n    color: red;\n}\n.todoDelete::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f2ed";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n                                                       /* contentDiv styling */\n.contentDiv{\n    \n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n.contentDiv.blur {\n    filter: blur(10px);\n}\n.headerDiv {\n  \n    background-color: var(--background);\n    display: flex;\n    align-items: center;\n    \n}\n.middleDiv {\n   flex: 1;\n   display: grid;\n   grid-template-columns: 15% 1fr;\n   grid-template-rows: 1fr 15%;\n\n}\n\n.todoContainer {\n    \n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n   \n}\n\n.addNewTodoContainer {\n    /* position: relative; */\n    grid-column: 2/ 3;\n    grid-row: 2 /3;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n}\n\n.contentLeftDiv {\n    grid-column: 1/2;\n    grid-row: 1/3;\n}\n\n                                                            /* Header styling */\n.headerDiv h1 {\n    padding: .3rem;\n}\n                                                            /* projectsContainer */\n.projectsContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    align-items: center;\n    gap: 2rem;\n    background-color: var(--yellow);\n    height: 100%;\n    width: 100%;\n\n    padding-top: 2rem;\n}\n.projectDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: .4rem;\n}\n.activeProject {\n    text-decoration: underline;\n}\n.projectTitle {\n    cursor: pointer;\n    margin-top: 1rem;\n    font-weight: 200;\n    font-size: 1.4rem;\n   \n}\n\n.projectTitle:hover {\n    transform: scale(1.1);\n    font-weight: 200;\n    \n}\n                                                            /* projectForm */\n.projectFormContainer {\n   \n    max-width: 100%;\n\n    background-color: var(--yellow);\n    border-radius: 1px;\n}\n\n.projectForm {\n   \n\n    \n}\n.projectFormName {\nmargin: 0.1rem;\nwidth: 8rem;\n}\n\n.addNewProject {\n   \n    margin: 1rem;\n    height: 2rem;\n    width: 2rem;\n    border-radius: 100px;\n    cursor: pointer;\n    border-style: hidden;\n    background-color: bisque;\n}\n.addNewProject::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewProject:hover,\n.addNewTodo:hover {\n    transform: scale(1.2);\n    background-color: #b0e0bc;\n    border-color:  #93efaa;\n    cursor: pointer;\n}\n\n.projectButtonContainer{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: .3rem;\n}\n.addProject {\n    border-color: rgb(95, 179, 10);\n    box-shadow: none;\n    border-style: none;\n    border: 1px solid  rgb(95, 179, 10);\n    border-radius: 2px;\n    padding: 0 .5rem;\n    color:  rgb(95, 179, 10);\n  }\n  .cancelProject {\n      border-color: rgb(95, 179, 10);\n      box-shadow: none;\n      border-style: none;\n      border: 1px solid  rgb(95, 179, 10);\n      border-radius: 2px;\n      padding: 0 .5rem;\n      color:  rgb(95, 179, 10);\n    }\n\n  .addProject:hover,\n  .cancelProject:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n\n                                                       /* details and Edit Window styling */\n.detailsWindow,\n.editWindow{\n    background-color: var(--blue);\n    display: none;  \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    transform: translate(-50%, -50%);\n    padding: 0.3rem;\n    border-radius: 4px;\n    width: 50vw;\n}\n.detailsWindow.show,\n.editWindow.show{  \n    display: inline-block;  \n}\n.detailsHeader{\n    display: flex;\n    justify-content: space-between;\n}\n.closeEdit {\n    display: flex;\n    justify-content: end;\n}\n.closeDetails,\n.closeEdit {\n    cursor: pointer;\n}\n.closeDetails:hover,\n.closeEdit:hover {\n    color: red;\n}\n.editPrioritySelect {\n    margin: .3rem;\n    font-family: inherit;\n    font-weight: 200;\n    border: none;\n}\n.editDueDate {\n   \n    font-family: inherit;\n    font-weight: 200;\n\n}\n.confirmEdit{\n    \n    border: 1px solid var(--background);\n    background-color: var(--yellow);\n    color: var(--purple);\n    border-radius: 3px;\n    display: inline-block;\n    padding: .2rem;\n    float: right;\n}\n.confirmEdit:hover {\n    background-color: var(--purple);\n    color: var(--yellow);\n\n}\n.detailsTitle {\n    font-family: inherit;\n    font-weight: 400;\n}\n.detailsDescription,\n.detailsDueDate  {\n    font-weight: 200;\n} \n.detailsPriority {\n    font-weight: 400;\n    text-transform: uppercase;\n}\n.detailsPriority.low {\n    color: green;\n    \n}\n.detailsPriority.med {\n    color: blue;\n}\n.detailsPriority.high {\n    color: red;\n}\n\n\n                                                            /* Footer styling*/\n\n.footerDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n\n                                                            /* addNewTodo */\n                                                    \n\n\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodo {\n    margin: 1rem;\n    height: 3rem;\n    width: 3rem;\n    border-radius: 100px;\n    border-style: hidden;\n    background-color: bisque;\n}\n\n.addNewTodo::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewTodo::after:hover {\n    scale: 1.6;\n}\n\n\n\n\n\n\n\n\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nhtml {\n    font-family:\'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;  \n   \n}\n\n:root {\n    --blue: #14EBE7;\n    --yellow :#ebe98c;\n    --purple: #be09be;\n    --background: blanchedalmond;\n}\n                                                        /* Todo form  */\n.todoFormContainer{\n    background-color: var(--blue);\n    border-radius: 10px;\n    display: flex; \n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0.3rem;\n}\n\n\n.formHeader {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin: 0.3rem;\n}\n.todoFormContainer h2 {\n    margin-left: .6rem;\n    color: white;\n    \n    padding: 0;\n}\n.closeForm {\n    border-style: none;\n   background-color: inherit;\n    cursor: pointer;\n    margin: .3rem;\n}\n.closeForm:hover {\n    color: red;\n}\n\n.formUl{\n    margin: 0;\n    padding: 0;\n    list-style: none; \n}\n.formLi{\n    padding:.2rem;\n}\ntextarea{\n    width: 300px;\n    height: 100px;\n    border: none;\n    outline-style: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\nlabel {\n    font-weight: 100;\n    margin: .3rem;\n}\ninput{\n    outline-style: none;\n    border: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\n.dueDateInput {\n\n    font-weight: 200;\n    \n}\n.submit {\n  border-color: rgb(95, 179, 10);\n  box-shadow: none;\n  border-style: none;\n  border: 1px solid  rgb(95, 179, 10);\n  border-radius: 2px;\n  padding: 0 1rem;\n  color:  rgb(95, 179, 10);\n}\n\n\n.submit:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n.formLi_footer {\n   display: flex;\n   justify-content: space-between;\n}\n.priority{\n    border-radius: 2px;\n    padding: 0;\n    font-size: .7rem;\n    color:  rgb(95, 179, 10);\n    border-color: rgb(95, 179, 10);;\n}\n\n\n/* \n///////////////\ntodoDiv styling   \n//////////////\n*/\n.todoDiv {\n    background-color: var(--blue);\n    display: flex;\n    width: 98%;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.3rem;\n    padding-left: 0;\n    margin:0.3rem;\n    height: 2rem; \n}\n.todoDiv:hover {\n    transform: scale(1.01);\n    box-shadow: 0px 0px 2px var(--blue);  \n}\n\n.todoDiv.checked {\n    filter: blur(1px);\n    color: rgb(120, 125, 144);\n    text-decoration: line-through;\n    \n}\n.todoDivRight{\n    display: flex;\n    gap: 1rem;\n}\n.todoDivLeft {\n    display: flex;\n    gap: 1rem;\n    height: 2rem;\n}\n.todoDivCenter {\n    flex:1;\n}\n\n                                                                /* todoDetails */   \n    .todoDetails {\n        background-color: var(--blue);\n        border-radius: 3px;\n        border:1px solid white;\n        font-family: inherit;\n        font-weight: 300;\n        padding: 0.2rem;\n        cursor: pointer;\n        \n    }\n    .todoDetails:hover {\n        background-color: var(--yellow);\n        color: var(--purple);\n    }\n\n                                                                /* checkbox styling */\n\n\n.todoCheckMark {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--blue);\n    border-radius: 3px;\n    border: 1px solid rgb(255, 255, 255);\n}\n.todoCheckMark:hover {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--yellow);\n    border-radius: 3px;\n    cursor: pointer;\n   \n}\n.todoCheckMark:hover::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n\n}\n\n.todoCheckMark:checked::after{\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--yellow);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n\n\n\n.todoPriority{\n    \n    height: 100%;\n    width: 0.3rem;\n}\n.todoPriority.low {\n    background-color: green;\n}\n.todoPriority.med {\n    background-color: yellow;\n}\n.todoPriority {\n    background-color: red;\n}\n\n.todoTitle,\n.todoDescription,\n.dueDate {\n    margin: 0;\n    margin-left: 0.3rem;\n    font-size: 1rem;\n    font-weight: 200;\n    width: 3rem;\n}\n.todoTitle {\n    width: 100%;\n}\n.dueDate {\n    align-self: center;\n}\n.todoEdit {\n    height: .5rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.todoDelete {\n    height: 1rem;\n    width: 1rem;\n    cursor: pointer;\n}\n.todoEdit::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f044";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.todoEdit:hover::before { \n    color: var(--yellow);\n}\n.todoDelete:hover::before {\n    color: red;\n}\n.todoDelete::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f2ed";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n                                                       /* contentDiv styling */\n.contentDiv{\n    \n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n.contentDiv.blur {\n    filter: blur(10px);\n}\n.headerDiv {\n  \n    background-color: var(--background);\n    display: flex;\n    align-items: center;\n    \n}\n.middleDiv {\n   flex: 1;\n   display: grid;\n   grid-template-columns: 15% 1fr;\n   grid-template-rows: 1fr 15%;\n\n}\n\n.todoContainer {\n    \n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n   \n}\n\n.addNewTodoContainer {\n    /* position: relative; */\n    grid-column: 2/ 3;\n    grid-row: 2 /3;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n}\n\n.contentLeftDiv {\n    grid-column: 1/2;\n    grid-row: 1/3;\n}\n\n                                                            /* Header styling */\n.headerDiv h1 {\n    padding: .3rem;\n}\n                                                            /* projectsContainer */\n.projectsContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    align-items: center;\n    gap: 2rem;\n    background-color: var(--yellow);\n    height: 100%;\n    width: 100%;\n\n    padding-top: 2rem;\n}\n.projectDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: .4rem;\n}\n.activeProject {\n    text-decoration: underline;\n}\n.projectTitle {\n    cursor: pointer;\n    margin-top: 1rem;\n    font-weight: 200;\n    font-size: 1.4rem;\n   \n}\n\n.projectTitle:hover {\n    transform: scale(1.1);\n    font-weight: 200;\n    \n}\n                                                            /* projectForm */\n.projectFormContainer {\n   \n    max-width: 100%;\n\n    background-color: var(--yellow);\n    border-radius: 1px;\n}\n\n.projectForm {\n   \n\n    \n}\n.projectFormName {\nmargin: 0.1rem;\nwidth: 8rem;\n}\n\n.addNewProject {\n   \n    margin: 1rem;\n    height: 2rem;\n    width: 2rem;\n    border-radius: 100px;\n    cursor: pointer;\n    border-style: hidden;\n    background-color: bisque;\n}\n.addNewProject::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewProject:hover,\n.addNewTodo:hover {\n    transform: scale(1.2);\n    background-color: #b0e0bc;\n    border-color:  #93efaa;\n    cursor: pointer;\n}\n\n.projectButtonContainer{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: .3rem;\n}\n.addProject {\n    border-color: rgb(95, 179, 10);\n    box-shadow: none;\n    border-style: none;\n    border: 1px solid  rgb(95, 179, 10);\n    border-radius: 2px;\n    padding: 0 .5rem;\n    color:  rgb(95, 179, 10);\n  }\n  .cancelProject {\n      border-color: rgb(95, 179, 10);\n      box-shadow: none;\n      border-style: none;\n      border: 1px solid  rgb(95, 179, 10);\n      border-radius: 2px;\n      padding: 0 .5rem;\n      color:  rgb(95, 179, 10);\n    }\n\n  .addProject:hover,\n  .cancelProject:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n\n                                                       /* details and Edit Window styling */\n.detailsWindow,\n.editWindow{\n    background-color: var(--blue);\n    display: none;  \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    transform: translate(-50%, -50%);\n    padding: 0.3rem;\n    border-radius: 4px;\n    width: 50vw;\n}\n.detailsWindow.show,\n.editWindow.show{  \n    display: inline-block;  \n}\n.detailsHeader{\n    display: flex;\n    justify-content: space-between;\n}\n.closeEdit {\n    display: flex;\n    justify-content: end;\n}\n.closeDetails,\n.closeEdit {\n    cursor: pointer;\n}\n.closeDetails:hover,\n.closeEdit:hover {\n    color: red;\n}\n.editPrioritySelect {\n    margin: .3rem;\n    font-family: inherit;\n    font-weight: 200;\n    border: none;\n}\n.editDueDate {\n   \n    font-family: inherit;\n    font-weight: 200;\n\n}\n.confirmEdit{\n    \n    border: 1px solid var(--background);\n    background-color: var(--yellow);\n    color: var(--purple);\n    border-radius: 3px;\n    display: inline-block;\n    padding: .2rem;\n    float: right;\n}\n.confirmEdit:hover {\n    background-color: var(--purple);\n    color: var(--yellow);\n\n}\n.detailsTitle {\n    font-family: inherit;\n    font-weight: 400;\n}\n.detailsDescription,\n.detailsDueDate  {\n    font-weight: 200;\n} \n.detailsPriority {\n    font-weight: 400;\n    text-transform: uppercase;\n}\n.detailsPriority.low {\n    color: green;\n    \n}\n.detailsPriority.med {\n    color: blue;\n}\n.detailsPriority.high {\n    color: red;\n}\n\n\n                                                            /* Footer styling*/\n\n.footerDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n\n                                                            /* addNewTodo */\n                                                    \n\n\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodo {\n    margin: 1rem;\n    height: 3rem;\n    width: 3rem;\n    border-radius: 100px;\n    border-style: hidden;\n    background-color: bisque;\n}\n\n.addNewTodo::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewTodo::after:hover {\n    scale: 1.6;\n}\n\n\n\n\n\n\n\n\n\n'],sourceRoot:""}]);const d=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(a[l]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],d=0;d<n.length;d++){var l=n[d],A=o.base?l[0]+o.base:l[0],c=i[A]||0,s="".concat(A," ").concat(c);i[A]=c+1;var u=t(s),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var f=r(m,o);o.byIndex=d,e.splice(d,0,{identifier:s,updater:f,references:1})}a.push(s)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var d=t(i[a]);e[d].references--}for(var l=o(n,r),A=0;A<i.length;A++){var c=t(i[A]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{class n{constructor(n,e,t,o,r){this.title=n,this.description=e,this.dueDate=t,this.priority=o,this.checklist=r}}class e{constructor(n){this.title=n,this.todosArr=[]}}function o(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function r(n){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},r(n)}function i(n){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i(n)}function a(n){o(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===i(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var l=864e5;function A(n){o(1,arguments);var e=a(n),t=e.getUTCDay(),r=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function c(n){o(1,arguments);var e=a(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var i=A(r),d=new Date(0);d.setUTCFullYear(t,0,4),d.setUTCHours(0,0,0,0);var l=A(d);return e.getTime()>=i.getTime()?t+1:e.getTime()>=l.getTime()?t:t-1}var s=6048e5;var u={};function m(){return u}function f(n,e){var t,r,i,l,A,c,s,u;o(1,arguments);var f=m(),h=d(null!==(t=null!==(r=null!==(i=null!==(l=null==e?void 0:e.weekStartsOn)&&void 0!==l?l:null==e||null===(A=e.locale)||void 0===A||null===(c=A.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==i?i:f.weekStartsOn)&&void 0!==r?r:null===(s=f.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=a(n),C=p.getUTCDay(),g=(C<h?7:0)+C-h;return p.setUTCDate(p.getUTCDate()-g),p.setUTCHours(0,0,0,0),p}function h(n,e){var t,r,i,l,A,c,s,u;o(1,arguments);var h=a(n),p=h.getUTCFullYear(),C=m(),g=d(null!==(t=null!==(r=null!==(i=null!==(l=null==e?void 0:e.firstWeekContainsDate)&&void 0!==l?l:null==e||null===(A=e.locale)||void 0===A||null===(c=A.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==i?i:C.firstWeekContainsDate)&&void 0!==r?r:null===(s=C.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var B=new Date(0);B.setUTCFullYear(p+1,0,g),B.setUTCHours(0,0,0,0);var b=f(B,e),v=new Date(0);v.setUTCFullYear(p,0,g),v.setUTCHours(0,0,0,0);var w=f(v,e);return h.getTime()>=b.getTime()?p+1:h.getTime()>=w.getTime()?p:p-1}var p=6048e5;function C(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const g=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return C("yy"===e?o%100:o,e.length)},B=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):C(t+1,2)},b=function(n,e){return C(n.getUTCDate(),e.length)},v=function(n,e){return C(n.getUTCHours()%12||12,e.length)},w=function(n,e){return C(n.getUTCHours(),e.length)},y=function(n,e){return C(n.getUTCMinutes(),e.length)},I=function(n,e){return C(n.getUTCSeconds(),e.length)},k=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return C(Math.floor(o*Math.pow(10,t-3)),e.length)};var x={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return g(n,e)},Y:function(n,e,t,o){var r=h(n,o),i=r>0?r:1-r;return"YY"===e?C(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):C(i,e.length)},R:function(n,e){return C(c(n),e.length)},u:function(n,e){return C(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return C(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return C(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return B(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return C(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var i=function(n,e){o(1,arguments);var t=a(n),r=f(t,e).getTime()-function(n,e){var t,r,i,a,l,A,c,s;o(1,arguments);var u=m(),p=d(null!==(t=null!==(r=null!==(i=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(l=e.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:u.firstWeekContainsDate)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1),C=h(n,e),g=new Date(0);return g.setUTCFullYear(C,0,p),g.setUTCHours(0,0,0,0),f(g,e)}(t,e).getTime();return Math.round(r/p)+1}(n,r);return"wo"===e?t.ordinalNumber(i,{unit:"week"}):C(i,e.length)},I:function(n,e,t){var r=function(n){o(1,arguments);var e=a(n),t=A(e).getTime()-function(n){o(1,arguments);var e=c(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),A(t)}(e).getTime();return Math.round(t/s)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):C(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):b(n,e)},D:function(n,e,t){var r=function(n){o(1,arguments);var e=a(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=t-e.getTime();return Math.floor(r/l)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):C(r,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return C(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return C(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return C(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return v(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):w(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):y(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):I(n,e)},S:function(n,e){return k(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return D(r);case"XXXX":case"XX":return T(r);default:return T(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return D(r);case"xxxx":case"xx":return T(r);default:return T(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+E(r,":");default:return"GMT"+T(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+E(r,":");default:return"GMT"+T(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return C(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return C((o._originalDate||n).getTime(),e.length)}};function E(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),i=o%60;if(0===i)return t+String(r);var a=e||"";return t+String(r)+a+C(i,2)}function D(n,e){return n%60==0?(n>0?"-":"+")+C(Math.abs(n)/60,2):T(n,e)}function T(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+C(Math.floor(r/60),2)+t+C(r%60,2)}const M=x;var L=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},j=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const P={p:j,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],i=o[2];if(!i)return L(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",L(r,e)).replace("{{time}}",j(i,e))}};var S=["D","DD"],F=["YY","YYYY"];function W(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var N={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function U(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const Y={date:U({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:U({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:U({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var H={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function q(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,i=null!=t&&t.width?String(t.width):r;o=n.formattingValues[i]||n.formattingValues[r]}else{var a=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[d]||n.values[a]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const O={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:q({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:q({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:q({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:q({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:q({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function G(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],i=e.match(r);if(!i)return null;var a,d=i[0],l=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],A=Array.isArray(l)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(d))return t}(l):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(d))return t}(l);return a=n.valueCallback?n.valueCallback(A):A,{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(d.length)}}}var z,Q={ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(z.matchPattern);if(!t)return null;var o=t[0],r=n.match(z.parsePattern);if(!r)return null;var i=z.valueCallback?z.valueCallback(r[0]):r[0];return{value:i=e.valueCallback?e.valueCallback(i):i,rest:n.slice(o.length)}}),era:G({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:G({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:G({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:G({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:G({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const X={code:"en-US",formatDistance:function(n,e,t){var o,r=N[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:Y,formatRelative:function(n,e,t,o){return H[n]},localize:O,match:Q,options:{weekStartsOn:0,firstWeekContainsDate:1}};var R=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,J=/^'([^]*?)'?$/,_=/''/g,V=/[a-zA-Z]/;function K(n,e,t){var i,l,A,c,s,u,f,h,p,C,g,B,b,v,w,y,I,k;o(2,arguments);var x=String(e),E=m(),D=null!==(i=null!==(l=null==t?void 0:t.locale)&&void 0!==l?l:E.locale)&&void 0!==i?i:X,T=d(null!==(A=null!==(c=null!==(s=null!==(u=null==t?void 0:t.firstWeekContainsDate)&&void 0!==u?u:null==t||null===(f=t.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==c?c:null===(p=E.locale)||void 0===p||null===(C=p.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==A?A:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=d(null!==(g=null!==(B=null!==(b=null!==(v=null==t?void 0:t.weekStartsOn)&&void 0!==v?v:null==t||null===(w=t.locale)||void 0===w||null===(y=w.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==b?b:E.weekStartsOn)&&void 0!==B?B:null===(I=E.locale)||void 0===I||null===(k=I.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==g?g:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var j=a(n);if(!function(n){if(o(1,arguments),!function(n){return o(1,arguments),n instanceof Date||"object"===r(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=a(n);return!isNaN(Number(e))}(j))throw new RangeError("Invalid time value");var N=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(j),U=function(n,e){return o(2,arguments),function(n,e){o(2,arguments);var t=a(n).getTime(),r=d(e);return new Date(t+r)}(n,-d(e))}(j,N),Y={firstWeekContainsDate:T,weekStartsOn:L,locale:D,_originalDate:j};return x.match(Z).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,P[e])(n,D.formatLong):n})).join("").match(R).map((function(o){if("''"===o)return"'";var r,i,a=o[0];if("'"===a)return(i=(r=o).match(J))?i[1].replace(_,"'"):r;var d,l=M[a];if(l)return null!=t&&t.useAdditionalWeekYearTokens||(d=o,-1===F.indexOf(d))||W(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==S.indexOf(n)}(o)||W(o,e,String(n)),l(U,o,D.localize,Y);if(a.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return o})).join("")}function $(n){console.log("inside Display");const e=document.getElementById("todoContainer"),t=document.createElement("div");t.classList.add("addNewTodoDiv"),e.innerHTML="",n.forEach(((n,t)=>{const o=t;n.id=t;const r=document.createElement("div");r.classList.add("todoDiv"),r.setAttribute("id","todoDiv"),r.setAttribute("data-cell",o);const i=document.createElement("div");i.setAttribute("id","todoPriority"),i.classList.add("todoPriority"),"low"==n.priority?i.classList.add("low"):"med"==n.priority?i.classList.add("med"):"high"==n.priority&&i.classList.add("high");const a=document.createElement("input");a.setAttribute("type","checkbox"),a.setAttribute("id","todoCheckMark"),a.classList.add("todoCheckMark");const d=document.createElement("h5");d.classList.add("todoTitle"),d.innerHTML=n.title;const l=document.createElement("button");l.classList.add("todoDetails"),l.setAttribute("id","todoDetails"),l.innerHTML="Details";const A=document.createElement("h6");A.classList.add("dueDate"),console.log(n.dueDate);const c=new Date(n.dueDate),s=new Date(c.valueOf()+60*c.getTimezoneOffset()*1e3);A.innerHTML=K(s,"MM/dd/yy");const u=document.createElement("div");u.classList.add("todoEdit"),u.id="todoEdit";const m=document.createElement("div");m.classList.add("todoDelete"),m.id="todoDelete";const f=document.createElement("div");f.classList.add("todoDivLeft");const h=document.createElement("div");h.classList.add("todoDivCenter");const p=document.createElement("div");p.classList.add("todoDivRight"),f.appendChild(i),f.appendChild(a),h.appendChild(d),p.appendChild(l),p.appendChild(A),p.appendChild(u),p.appendChild(m),r.appendChild(f),r.appendChild(h),r.appendChild(p),e.appendChild(r)}));const o=document.createElement("button");o.classList.add("addNewTodo"),o.setAttribute("id","addNewTodo"),e.appendChild(t),t.appendChild(o)}function nn(n){const e=document.getElementById("projectsContainer");e.innerHTML="";const t=document.createElement("div");t.classList.add("projectFormContainer"),t.id="projectFormContainer",t.innerHTML="",n.forEach(((n,t)=>{const o=document.createElement("div");o.classList.add("projectDiv"),o.setAttribute("id","projectDiv");const r=document.createElement("h2");r.classList.add("projectTitle"),r.setAttribute("id","projectTitle"),r.innerHTML=n.title,o.appendChild(r),e.append(o)}));const o=document.createElement("button");o.classList.add("addNewProject"),o.setAttribute("id","addNewProject"),e.appendChild(o)}var en=t(379),tn=t.n(en),on=t(795),rn=t.n(on),an=t(569),dn=t.n(an),ln=t(565),An=t.n(ln),cn=t(216),sn=t.n(cn),un=t(589),mn=t.n(un),fn=t(426),hn={};hn.styleTagTransform=mn(),hn.setAttributes=An(),hn.insert=dn().bind(null,"head"),hn.domAPI=rn(),hn.insertStyleElement=sn(),tn()(fn.Z,hn),fn.Z&&fn.Z.locals&&fn.Z.locals;let pn=[];localStorage.getItem("projectArray")?localStorage.getItem("projectArray")&&(pn=JSON.parse(localStorage.getItem("projectArray"))):(pn=[{title:"Home",todosArr:[{title:"Read 10 pages",description:"This is short description",dueDate:"2023-07-24",priority:"high"},{title:"Code",description:"This is short description",dueDate:"2023-03-23",priority:"med"}]},{title:"projectOne",todosArr:[]}],localStorage.setItem("projectArray",JSON.stringify(pn)));const Cn=pn[0].todosArr;let gn="Home";function Bn(n){localStorage.setItem("projectArray",JSON.stringify(n))}const bn=document.getElementById("contentDiv");$(Cn),nn(pn),document.querySelector(".projectTitle").classList.add("activeProject"),todoContainer.addEventListener("click",(function(e){const t=e.target.id;if("todoDelete"==t){const n=e.target.parentNode.parentNode.attributes[2].value,t=pn.findIndex((n=>n.title==gn)),o=pn[t].todosArr,r=o.findIndex((e=>e.id==n));o.splice(r,1),Bn(pn),$(o)}else if("todoDetails"==t){const n=e.target.parentNode.parentNode.attributes[2].value,t=Cn.findIndex((e=>e.id==n));!function(n){const e=document.createElement("div");e.classList.add("detailsWindow"),e.id="detailsWindow",e.classList.add("show");const t=document.createElement("div");t.classList.add("closeDetails"),t.innerHTML="X",t.addEventListener("click",(function(){e.classList.remove("show"),contentDiv.classList.remove("blur")}));const o=document.createElement("div");o.classList.add("detailsHeader");const r=document.createElement("h2");r.classList.add("detailsTitle"),r.innerHTML=n.title;const i=document.createElement("h4");i.classList.add("detailsDescription"),i.innerHTML=n.description;const a=document.createElement("h4");a.classList.add("detailsDueDate"),a.innerHTML=n.dueDate;const d=document.createElement("h4");d.classList.add("detailsPriority"),d.innerHTML=n.priority,"low"==d.innerHTML?d.classList.add("low"):"med"==d.innerHTML?d.classList.add("med"):(d.innerHTML="high")&&d.classList.add("high"),o.appendChild(r),o.appendChild(t),e.appendChild(o),e.appendChild(i),e.appendChild(a),e.appendChild(d),document.body.appendChild(e)}(Cn[t]),bn.classList.add("blur")}else if("todoEdit"==t){const t=e.target.parentNode.parentNode.attributes[2].value,o=pn.findIndex((n=>n.title==gn)),r=pn[o].todosArr,i=r.findIndex((n=>n.id==t)),a=r[i];console.log(a),function(n){const e=document.createElement("div");e.classList.add("editWindow"),e.classList.add("show"),e.id="editWindow";const t=document.createElement("h2");t.classList.add="editTitle",t.id="editTitle",t.contentEditable="True",t.innerHTML=n.title;const o=document.createElement("h4");o.classList.add="editDescription",o.id="editDescription",o.contentEditable="True",o.innerHTML=n.description;const r=document.createElement("input");r.type="date",r.id="editDueDate",r.classList.add("editDueDate"),r.defaultValue=n.dueDate,console.log(r.defaultValue);const i=document.createElement("select");i.name="priority",i.classList.add("editPrioritySelect"),i.id="editPrioritySelect";const a=document.createElement("option");a.value="low",a.textContent="LOW";const d=document.createElement("option");d.value="med",d.textContent="MED";const l=document.createElement("option");l.value="high",l.textContent="HIGH","low"==n.priority?a.setAttribute("selected","selected"):"med"==n.priority?d.setAttribute("selected","selected"):"high"==n.priority&&l.setAttribute("selected","selected"),i.appendChild(a),i.appendChild(d),i.appendChild(l);const A=document.createElement("div");A.classList.add("closeEdit"),A.id="closeEdit",A.innerHTML="X",A.addEventListener("click",(function(){e.classList.remove("show"),e.remove(),contentDiv.classList.remove("blur")}));const c=document.createElement("div");c.classList.add("confirmEdit"),c.id="confirmEdit",c.innerHTML="Confirm",document.body.appendChild(e),e.appendChild(A),e.appendChild(t),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(c)}(a),bn.classList.add("blur"),confirmEdit.addEventListener("click",(function(){const e=document.getElementById("editTitle").innerHTML,t=document.getElementById("editDescription").innerHTML,o=document.getElementById("editDueDate").value;console.log(o);const a=document.getElementById("editPrioritySelect").value;console.log(a);const d=new n(e,t,o,a);console.log(d),r.splice(i,1,d),$(r),editWindow.classList.remove("show"),editWindow.remove(),bn.classList.remove("blur")}))}else if("todoCheckMark"==t){const n=e.target.parentNode.parentNode.attributes[2].value;console.log(e.target.parentNode.parentNode.attributes[2]),function(n){const e='[data-cell="'+n+'"]';console.log(e);const t=document.querySelector(e);console.log(t),t.classList.contains("checked")?t.classList.remove("checked"):t.classList.contains("checked")||t.classList.add("checked")}(n)}else"addNewTodo"==t&&(document.getElementById("todoFormContainer")&&(console.log(document.getElementById("todoFormContainer")),document.getElementById("todoFormContainer").remove()),function(){const n=document.createElement("div"),e=document.getElementById("todoContainer");n.classList.add("todoFormContainer"),n.id="todoFormContainer",n.innerHTML="";const t=document.createElement("div");t.classList.add("formHeader");const o=document.createElement("h2");o.textContent="Create New";const r=document.createElement("button");r.classList.add("closeForm"),r.id="closeForm",r.textContent="X",r.addEventListener("click",(function(e){n.remove()}));const i=document.createElement("form");i.action="",i.classList.add("todoForm"),i.id="todoForm";const a=document.createElement("ul");a.classList.add("formUl");const d=document.createElement("li");d.classList.add("formLi");const l=document.createElement("label");l.setAttribute("for","title");const A=document.createElement("input");A.type="text",A.id="title",A.placeholder="Title",A.required=!0;const c=document.createElement("li");c.classList.add("formLi");const s=document.createElement("label");s.setAttribute("for","description");const u=document.createElement("textarea");u.name="description",u.id="description",u.cols=10,u.rows=10,u.placeholder="Description",u.required=!0;const m=document.createElement("li");m.classList.add("formLi");const f=document.createElement("label");f.setAttribute("for","dueDateInput"),f.textContent="Due Date";const h=document.createElement("input");h.type="date",h.classList.add("dueDateInput"),h.id="dueDateInput",h.required=!0;const p=document.createElement("li");p.classList.add("formLi","formLi_footer");const C=document.createElement("div"),g=document.createElement("label");g.setAttribute("for","priority"),g.textContent="Priority";const B=document.createElement("select");B.name="priority",B.classList.add("priority"),B.id="priority",B.required=!0;const b=document.createElement("option");b.value="low",b.textContent="LOW";const v=document.createElement("option");v.value="med",v.textContent="MED";const w=document.createElement("option");w.value="high",w.textContent="HIGH";const y=document.createElement("button");y.type="submit",y.id="submit",y.classList.add("submit"),y.textContent="ADD",n.appendChild(t),n.appendChild(i),t.appendChild(o),t.appendChild(r),i.appendChild(a),a.appendChild(d),d.appendChild(l),d.appendChild(A),l.appendChild(document.createTextNode("")),a.appendChild(c),c.appendChild(s),c.appendChild(u),s.appendChild(document.createTextNode("")),a.appendChild(m),m.appendChild(f),m.appendChild(h),a.appendChild(p),p.appendChild(C),C.appendChild(g),B.appendChild(b),B.appendChild(v),B.appendChild(w),C.appendChild(B),p.appendChild(y),e.appendChild(n)}(),document.getElementById("todoForm").addEventListener("submit",(function(e){e.preventDefault();const t=document.getElementById("title").value,o=document.getElementById("description").value,r=document.getElementById("dueDateInput").value,i=document.getElementById("priority").value,a=new n(t,o,r,i);console.log(a);const d=pn.findIndex((n=>n.title==gn)),l=pn[d].todosArr;l.push(a),$(l),Bn(pn),e.target.parentNode.innerHTML=""})))})),projectsContainer.addEventListener("click",(function(n){const t=document.querySelectorAll(".projectTitle");console.log(t);const o=n.target.id;if("projectTitle"==o){const e=n.target.innerHTML;t.forEach((n=>{n.classList.remove("activeProject")})),n.target.classList.add("activeProject"),gn=e;const o=pn.findIndex((n=>n.title==e));$(pn[o].todosArr)}else"addNewProject"==o&&(document.getElementById("projectFormContainer")&&document.getElementById("projectFormContainer").remove(),function(){const n=document.getElementById("projectsContainer"),e=document.createElement("div");e.classList.add("projectFormContainer"),e.id="projectFormContainer";const t=document.createElement("form");t.classList.add("projectForm"),t.setAttribute("id","projectForm");const o=document.createElement("input");o.setAttribute("type","text"),o.placeholder="Title",o.classList.add("projectFormName"),o.id="projectFormName",o.required=!0;const r=document.createElement("button");r.classList.add("addProject"),r.setAttribute("id","addProject"),r.type="submit",r.innerHTML="Add";const i=document.createElement("button");i.classList.add("cancelProject"),i.setAttribute("id","cancelProject"),i.innerHTML="Cancel",i.addEventListener("click",(function(n){n.preventDefault(),e.remove()}));const a=document.createElement("div");a.classList.add("projectButtonContainer"),t.appendChild(o),a.appendChild(r),a.appendChild(i),t.appendChild(a),e.appendChild(t),n.appendChild(e)}(),projectForm.addEventListener("submit",(function(n){n.preventDefault();const t=document.getElementById("projectFormName"),o=new e(t.value);pn.push(o),nn(pn)})))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,