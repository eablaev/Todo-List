(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nhtml {\n    font-family:\'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;  \n   \n}\n\n:root {\n    --blue: #14EBE7;\n    --yellow :#ebe98c;\n    --purple: #be09be;\n    --background: blanchedalmond;\n}\n                                                        /* Todo form  */\n.todoFormContainer{\n    background-color: var(--blue);\n    border-radius: 10px;\n    display: none; \n    padding: 0.3rem;\n}\n\n    \n.todoFormContainer.showTodoForm {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  \n\n}\n\n.formHeader {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin: 0.3rem;\n}\n.todoFormContainer h2 {\n    margin-left: .6rem;\n    color: white;\n    \n    padding: 0;\n}\n.closeForm {\n    border-style: none;\n   background-color: inherit;\n    cursor: pointer;\n    margin: .3rem;\n}\n.closeForm:hover {\n    color: red;\n}\n\n.formUl{\n    margin: 0;\n    padding: 0;\n    list-style: none; \n}\n.formLi{\n    padding:.2rem;\n}\ntextarea{\n    width: 300px;\n    height: 100px;\n    border: none;\n    outline-style: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\nlabel {\n    font-weight: 100;\n    margin: .3rem;\n}\ninput{\n    outline-style: none;\n    border: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\n.dueDateInput {\n\n    font-weight: 200;\n    \n}\n.submit {\n  border-color: rgb(95, 179, 10);\n  box-shadow: none;\n  border-style: none;\n  border: 1px solid  rgb(95, 179, 10);\n  border-radius: 2px;\n  padding: 0 1rem;\n  color:  rgb(95, 179, 10);\n}\n\n\n.submit:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n.formLi_footer {\n   display: flex;\n   justify-content: space-between;\n}\n.priority{\n    border-radius: 2px;\n    padding: 0;\n    font-size: .7rem;\n    color:  rgb(95, 179, 10);\n    border-color: rgb(95, 179, 10);;\n}\n\n\n/* \n///////////////\ntodoDiv styling   \n//////////////\n*/\n.todoDiv {\n    background-color: var(--blue);\n    display: flex;\n    width: 98%;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.3rem;\n    padding-left: 0;\n    margin:0.3rem;\n    height: 2rem; \n}\n.todoDiv:hover {\n    transform: scale(1.01);\n    box-shadow: 2px 2px 2px var(--blue);  \n}\n.todoDiv.checked {\n    filter: blur(1px);\n    color: rgb(120, 125, 144);\n    text-decoration: line-through;\n    \n}\n.todoDivRight{\n    display: flex;\n    gap: 1rem;\n}\n.todoDivLeft {\n    display: flex;\n    gap: 1rem;\n    height: 2rem;\n}\n.todoDivCenter {\n    flex:1;\n}\n\n                                                                /* todoDetails */   \n    .todoDetails {\n        background-color: var(--blue);\n        border-radius: 3px;\n        border:1px solid white;\n        font-family: inherit;\n        font-weight: 300;\n        padding: 0.2rem;\n        cursor: pointer;\n        \n    }\n    .todoDetails:hover {\n        background-color: var(--yellow);\n        color: var(--purple);\n    }\n\n                                                                /* checkbox styling */\n\n\n.todoCheckMark {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--blue);\n    border-radius: 3px;\n    border: 1px solid rgb(255, 255, 255);\n}\n.todoCheckMark:hover {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--yellow);\n    border-radius: 3px;\n    cursor: pointer;\n   \n}\n.todoCheckMark:hover::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n\n}\n\n.todoCheckMark:checked::after{\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--yellow);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n\n\n\n.todoPriority{\n    \n    height: 100%;\n    width: 0.3rem;\n}\n.todoPriority.low {\n    background-color: green;\n}\n.todoPriority.med {\n    background-color: yellow;\n}\n.todoPriority {\n    background-color: red;\n}\n.todoTitle,\n.todoDescription,\n.dueDate {\n    margin: 0;\n    margin-left: 0.3rem;\n    font-size: 1rem;\n    font-weight: 200;\n    width: 3rem;\n}\n.dueDate {\n    align-self: center;\n}\n.todoEdit {\n    height: .5rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.todoDelete {\n    height: 1rem;\n    width: 1rem;\n    cursor: pointer;\n}\n.todoEdit::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f044";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.todoEdit:hover::before { \n    color: var(--yellow);\n}\n.todoDelete:hover::before {\n    color: red;\n}\n.todoDelete::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f2ed";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n                                                       /* contentDiv styling */\n.contentDiv{\n    \n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n.headerDiv {\n  \n    background-color: var(--background);\n    display: flex;\n    align-items: center;\n    \n}\n.middleDiv {\n   flex: 1;\n   display: grid;\n   grid-template-columns: 15% 1fr;\n   grid-template-rows: 1fr 15%;\n\n}\n\n.todoContainer {\n    \n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n   \n}\n\n.addNewTodoContainer {\n    /* position: relative; */\n    grid-column: 2/ 3;\n    grid-row: 2 /3;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n}\n\n.contentLeftDiv {\n    grid-column: 1/2;\n    grid-row: 1/3;\n}\n\n                                                            /* Header styling */\n.headerDiv h1 {\n    padding: .3rem;\n}\n                                                            /* projectsContainer */\n.projectsContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    align-items: center;\n    gap: 2rem;\n    background-color: var(--yellow);\n    height: 100%;\n    width: auto;\n\n    padding-top: 2rem;\n}\n.projectTitle {\n    cursor: pointer;\n    margin-top: 1rem;\n    font-weight: 200;\n    font-size: 1.4rem;\n   \n}\n.projectTitle:hover {\n    transform: scale(1.1);\n    font-weight: 400;\n    \n}\n\n.projectFormContainer {\n   \n    max-width: 100%;\n\n    position: absolute;\n    top: 50%;\n    left: 50%; \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    transform: translate(-50%, -50%);\n\n    background-color: #00f13c;\n    border-radius: 1px;\n}\n\n.projectForm {\n    padding: .2rem;\n}\n\n.addNewProject {\n   \n    margin: 1rem;\n    height: 2rem;\n    width: 2rem;\n    border-radius: 100px;\n    cursor: pointer;\n    border-style: hidden;\n    background-color: bisque;\n}\n.addNewProject::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewProject:hover,\n.addNewTodo:hover {\n    transform: scale(1.2);\n    background-color: #b0e0bc;\n    border-color:  #93efaa;\n    cursor: pointer;\n}\n\n.projectButtonContainer{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.addProject {\n    border-color: rgb(95, 179, 10);\n    box-shadow: none;\n    border-style: none;\n    border: 1px solid  rgb(95, 179, 10);\n    border-radius: 2px;\n    padding: 0 1rem;\n    color:  rgb(95, 179, 10);\n  }\n  .cancelProject {\n      border-color: rgb(95, 179, 10);\n      box-shadow: none;\n      border-style: none;\n      border: 1px solid  rgb(95, 179, 10);\n      border-radius: 2px;\n      padding: 0 1rem;\n      color:  rgb(95, 179, 10);\n    }\n\n  .addProject:hover,\n  .cancelProject:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n\n                                                       /* detailsWindow styling */\n.detailsWindow{\n    background-color: aquamarine;\n    display: none;  \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    transform: translate(-50%, -50%);\n}\n.detailsWindow.show{\n    border: 1px solid black;\n    display: inline-block;  \n}\n\n.detailsHeader{\n    display: flex;\n    justify-content: space-between;\n}\n\n                                                            /* Footer styling*/\n\n.footerDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n\n                                                            /* addNewTodo */\n                                                    \n\n\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodo {\n    margin: 1rem;\n    height: 3rem;\n    width: 3rem;\n    border-radius: 100px;\n    border-style: hidden;\n    background-color: bisque;\n}\n\n.addNewTodo::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewTodo::after:hover {\n    scale: 1.6;\n}\n\n\n\n\n\n\n\n\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nhtml {\n    font-family:\'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;  \n   \n}\n\n:root {\n    --blue: #14EBE7;\n    --yellow :#ebe98c;\n    --purple: #be09be;\n    --background: blanchedalmond;\n}\n                                                        /* Todo form  */\n.todoFormContainer{\n    background-color: var(--blue);\n    border-radius: 10px;\n    display: none; \n    padding: 0.3rem;\n}\n\n    \n.todoFormContainer.showTodoForm {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  \n\n}\n\n.formHeader {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin: 0.3rem;\n}\n.todoFormContainer h2 {\n    margin-left: .6rem;\n    color: white;\n    \n    padding: 0;\n}\n.closeForm {\n    border-style: none;\n   background-color: inherit;\n    cursor: pointer;\n    margin: .3rem;\n}\n.closeForm:hover {\n    color: red;\n}\n\n.formUl{\n    margin: 0;\n    padding: 0;\n    list-style: none; \n}\n.formLi{\n    padding:.2rem;\n}\ntextarea{\n    width: 300px;\n    height: 100px;\n    border: none;\n    outline-style: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\nlabel {\n    font-weight: 100;\n    margin: .3rem;\n}\ninput{\n    outline-style: none;\n    border: none;\n    border-radius: 2px;\n    text-indent: .2rem;\n    font-family: inherit;\n}\n.dueDateInput {\n\n    font-weight: 200;\n    \n}\n.submit {\n  border-color: rgb(95, 179, 10);\n  box-shadow: none;\n  border-style: none;\n  border: 1px solid  rgb(95, 179, 10);\n  border-radius: 2px;\n  padding: 0 1rem;\n  color:  rgb(95, 179, 10);\n}\n\n\n.submit:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n.formLi_footer {\n   display: flex;\n   justify-content: space-between;\n}\n.priority{\n    border-radius: 2px;\n    padding: 0;\n    font-size: .7rem;\n    color:  rgb(95, 179, 10);\n    border-color: rgb(95, 179, 10);;\n}\n\n\n/* \n///////////////\ntodoDiv styling   \n//////////////\n*/\n.todoDiv {\n    background-color: var(--blue);\n    display: flex;\n    width: 98%;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.3rem;\n    padding-left: 0;\n    margin:0.3rem;\n    height: 2rem; \n}\n.todoDiv:hover {\n    transform: scale(1.01);\n    box-shadow: 2px 2px 2px var(--blue);  \n}\n.todoDiv.checked {\n    filter: blur(1px);\n    color: rgb(120, 125, 144);\n    text-decoration: line-through;\n    \n}\n.todoDivRight{\n    display: flex;\n    gap: 1rem;\n}\n.todoDivLeft {\n    display: flex;\n    gap: 1rem;\n    height: 2rem;\n}\n.todoDivCenter {\n    flex:1;\n}\n\n                                                                /* todoDetails */   \n    .todoDetails {\n        background-color: var(--blue);\n        border-radius: 3px;\n        border:1px solid white;\n        font-family: inherit;\n        font-weight: 300;\n        padding: 0.2rem;\n        cursor: pointer;\n        \n    }\n    .todoDetails:hover {\n        background-color: var(--yellow);\n        color: var(--purple);\n    }\n\n                                                                /* checkbox styling */\n\n\n.todoCheckMark {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--blue);\n    border-radius: 3px;\n    border: 1px solid rgb(255, 255, 255);\n}\n.todoCheckMark:hover {\n    appearance: none;\n    -webkit-appearance: none;\n    height: 1rem;\n    width: 1rem;\n    margin: auto 0.2rem;\n    background-color: var(--yellow);\n    border-radius: 3px;\n    cursor: pointer;\n   \n}\n.todoCheckMark:hover::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n\n}\n\n.todoCheckMark:checked::after{\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\f00c\';\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--yellow);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n\n\n\n.todoPriority{\n    \n    height: 100%;\n    width: 0.3rem;\n}\n.todoPriority.low {\n    background-color: green;\n}\n.todoPriority.med {\n    background-color: yellow;\n}\n.todoPriority {\n    background-color: red;\n}\n.todoTitle,\n.todoDescription,\n.dueDate {\n    margin: 0;\n    margin-left: 0.3rem;\n    font-size: 1rem;\n    font-weight: 200;\n    width: 3rem;\n}\n.dueDate {\n    align-self: center;\n}\n.todoEdit {\n    height: .5rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.todoDelete {\n    height: 1rem;\n    width: 1rem;\n    cursor: pointer;\n}\n.todoEdit::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f044";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.todoEdit:hover::before { \n    color: var(--yellow);\n}\n.todoDelete:hover::before {\n    color: red;\n}\n.todoDelete::before {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: "\\f2ed";\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n                                                       /* contentDiv styling */\n.contentDiv{\n    \n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n.headerDiv {\n  \n    background-color: var(--background);\n    display: flex;\n    align-items: center;\n    \n}\n.middleDiv {\n   flex: 1;\n   display: grid;\n   grid-template-columns: 15% 1fr;\n   grid-template-rows: 1fr 15%;\n\n}\n\n.todoContainer {\n    \n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n   \n}\n\n.addNewTodoContainer {\n    /* position: relative; */\n    grid-column: 2/ 3;\n    grid-row: 2 /3;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n}\n\n.contentLeftDiv {\n    grid-column: 1/2;\n    grid-row: 1/3;\n}\n\n                                                            /* Header styling */\n.headerDiv h1 {\n    padding: .3rem;\n}\n                                                            /* projectsContainer */\n.projectsContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    align-items: center;\n    gap: 2rem;\n    background-color: var(--yellow);\n    height: 100%;\n    width: auto;\n\n    padding-top: 2rem;\n}\n.projectTitle {\n    cursor: pointer;\n    margin-top: 1rem;\n    font-weight: 200;\n    font-size: 1.4rem;\n   \n}\n.projectTitle:hover {\n    transform: scale(1.1);\n    font-weight: 400;\n    \n}\n\n.projectFormContainer {\n   \n    max-width: 100%;\n\n    position: absolute;\n    top: 50%;\n    left: 50%; \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    transform: translate(-50%, -50%);\n\n    background-color: #00f13c;\n    border-radius: 1px;\n}\n\n.projectForm {\n    padding: .2rem;\n}\n\n.addNewProject {\n   \n    margin: 1rem;\n    height: 2rem;\n    width: 2rem;\n    border-radius: 100px;\n    cursor: pointer;\n    border-style: hidden;\n    background-color: bisque;\n}\n.addNewProject::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 300; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewProject:hover,\n.addNewTodo:hover {\n    transform: scale(1.2);\n    background-color: #b0e0bc;\n    border-color:  #93efaa;\n    cursor: pointer;\n}\n\n.projectButtonContainer{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.addProject {\n    border-color: rgb(95, 179, 10);\n    box-shadow: none;\n    border-style: none;\n    border: 1px solid  rgb(95, 179, 10);\n    border-radius: 2px;\n    padding: 0 1rem;\n    color:  rgb(95, 179, 10);\n  }\n  .cancelProject {\n      border-color: rgb(95, 179, 10);\n      box-shadow: none;\n      border-style: none;\n      border: 1px solid  rgb(95, 179, 10);\n      border-radius: 2px;\n      padding: 0 1rem;\n      color:  rgb(95, 179, 10);\n    }\n\n  .addProject:hover,\n  .cancelProject:hover\n{\n    color: white;\n    background-color: rgb(95, 179, 10);\n}\n\n                                                       /* detailsWindow styling */\n.detailsWindow{\n    background-color: aquamarine;\n    display: none;  \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    position: absolute;\n    top: 50%;\n    left: 50%; \n    transform: translate(-50%, -50%);\n}\n.detailsWindow.show{\n    border: 1px solid black;\n    display: inline-block;  \n}\n\n.detailsHeader{\n    display: flex;\n    justify-content: space-between;\n}\n\n                                                            /* Footer styling*/\n\n.footerDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n\n                                                            /* addNewTodo */\n                                                    \n\n\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodoDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.addNewTodo {\n    margin: 1rem;\n    height: 3rem;\n    width: 3rem;\n    border-radius: 100px;\n    border-style: hidden;\n    background-color: bisque;\n}\n\n.addNewTodo::after {\n    font-family: "Font Awesome 5 Free";\n    font-weight: 900; \n    content: \'\\2b\';\n    display: inline-block;\n    color: var(--purple);\n    font-style: normal;\n    font-variant: normal;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.addNewTodo::after:hover {\n    scale: 1.6;\n}\n\n\n\n\n\n\n\n\n\n'],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(i[l]=!0)}for(var s=0;s<n.length;s++){var A=[].concat(n[s]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],d=0;d<n.length;d++){var l=n[d],s=o.base?l[0]+o.base:l[0],A=a[s]||0,c="".concat(s," ").concat(A);a[s]=A+1;var u=t(c),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var f=r(m,o);o.byIndex=d,e.splice(d,0,{identifier:c,updater:f,references:1})}i.push(c)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=t(a[i]);e[d].references--}for(var l=o(n,r),s=0;s<a.length;s++){var A=t(a[s]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{class n{constructor(n,e,t,o,r){this.title=n,this.description=e,this.dueDate=t,this.priority=o,this.checklist=r}}class e{constructor(n){this.title=n,this.todosArr=[]}}function o(){console.log("handle edit")}function r(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function a(n){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},a(n)}function i(n){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i(n)}function d(n){r(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===i(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function l(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var s=864e5;function A(n){r(1,arguments);var e=d(n),t=e.getUTCDay(),o=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function c(n){r(1,arguments);var e=d(n),t=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var a=A(o),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var l=A(i);return e.getTime()>=a.getTime()?t+1:e.getTime()>=l.getTime()?t:t-1}var u=6048e5;var m={};function f(){return m}function h(n,e){var t,o,a,i,s,A,c,u;r(1,arguments);var m=f(),h=l(null!==(t=null!==(o=null!==(a=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(s=e.locale)||void 0===s||null===(A=s.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==a?a:m.weekStartsOn)&&void 0!==o?o:null===(c=m.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=d(n),C=p.getUTCDay(),g=(C<h?7:0)+C-h;return p.setUTCDate(p.getUTCDate()-g),p.setUTCHours(0,0,0,0),p}function p(n,e){var t,o,a,i,s,A,c,u;r(1,arguments);var m=d(n),p=m.getUTCFullYear(),C=f(),g=l(null!==(t=null!==(o=null!==(a=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(s=e.locale)||void 0===s||null===(A=s.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:C.firstWeekContainsDate)&&void 0!==o?o:null===(c=C.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var B=new Date(0);B.setUTCFullYear(p+1,0,g),B.setUTCHours(0,0,0,0);var b=h(B,e),v=new Date(0);v.setUTCFullYear(p,0,g),v.setUTCHours(0,0,0,0);var w=h(v,e);return m.getTime()>=b.getTime()?p+1:m.getTime()>=w.getTime()?p:p-1}var C=6048e5;function g(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const B=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return g("yy"===e?o%100:o,e.length)},b=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):g(t+1,2)},v=function(n,e){return g(n.getUTCDate(),e.length)},w=function(n,e){return g(n.getUTCHours()%12||12,e.length)},y=function(n,e){return g(n.getUTCHours(),e.length)},I=function(n,e){return g(n.getUTCMinutes(),e.length)},k=function(n,e){return g(n.getUTCSeconds(),e.length)},x=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return g(Math.floor(o*Math.pow(10,t-3)),e.length)};var E={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return B(n,e)},Y:function(n,e,t,o){var r=p(n,o),a=r>0?r:1-r;return"YY"===e?g(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):g(a,e.length)},R:function(n,e){return g(c(n),e.length)},u:function(n,e){return g(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return g(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return g(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return b(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return g(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){var a=function(n,e){r(1,arguments);var t=d(n),o=h(t,e).getTime()-function(n,e){var t,o,a,i,d,s,A,c;r(1,arguments);var u=f(),m=l(null!==(t=null!==(o=null!==(a=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(d=e.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==o?o:null===(A=u.locale)||void 0===A||null===(c=A.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),C=p(n,e),g=new Date(0);return g.setUTCFullYear(C,0,m),g.setUTCHours(0,0,0,0),h(g,e)}(t,e).getTime();return Math.round(o/C)+1}(n,o);return"wo"===e?t.ordinalNumber(a,{unit:"week"}):g(a,e.length)},I:function(n,e,t){var o=function(n){r(1,arguments);var e=d(n),t=A(e).getTime()-function(n){r(1,arguments);var e=c(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),A(t)}(e).getTime();return Math.round(t/u)+1}(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):g(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):v(n,e)},D:function(n,e,t){var o=function(n){r(1,arguments);var e=d(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=t-e.getTime();return Math.floor(o/s)+1}(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):g(o,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return g(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return g(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return g(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return w(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):y(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):g(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):g(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):I(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):k(n,e)},S:function(n,e){return x(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return D(r);case"XXXX":case"XX":return M(r);default:return M(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return D(r);case"xxxx":case"xx":return M(r);default:return M(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+T(r,":");default:return"GMT"+M(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+T(r,":");default:return"GMT"+M(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return g(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return g((o._originalDate||n).getTime(),e.length)}};function T(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=e||"";return t+String(r)+i+g(a,2)}function D(n,e){return n%60==0?(n>0?"-":"+")+g(Math.abs(n)/60,2):M(n,e)}function M(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+g(Math.floor(r/60),2)+t+g(r%60,2)}const j=E;var L=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},S=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const P={p:S,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return L(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",L(r,e)).replace("{{time}}",S(a,e))}};var F=["D","DD"],N=["YY","YYYY"];function U(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function W(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const q={date:W({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:W({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:W({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var H={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function O(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[d]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const G={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:O({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:O({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:O({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:O({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:O({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Q(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,d=a[0],l=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(l)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(d))return t}(l):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(d))return t}(l);return i=n.valueCallback?n.valueCallback(s):s,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(d.length)}}}var z,R={ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(z.matchPattern);if(!t)return null;var o=t[0],r=n.match(z.parsePattern);if(!r)return null;var a=z.valueCallback?z.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:Q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const X={code:"en-US",formatDistance:function(n,e,t){var o,r=Y[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:q,formatRelative:function(n,e,t,o){return H[n]},localize:G,match:R,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Z=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,_=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,J=/^'([^]*?)'?$/,V=/''/g,K=/[a-zA-Z]/;function $(n,e,t){var o,i,s,A,c,u,m,h,p,C,g,B,b,v,w,y,I,k;r(2,arguments);var x=String(e),E=f(),T=null!==(o=null!==(i=null==t?void 0:t.locale)&&void 0!==i?i:E.locale)&&void 0!==o?o:X,D=l(null!==(s=null!==(A=null!==(c=null!==(u=null==t?void 0:t.firstWeekContainsDate)&&void 0!==u?u:null==t||null===(m=t.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==c?c:E.firstWeekContainsDate)&&void 0!==A?A:null===(p=E.locale)||void 0===p||null===(C=p.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==s?s:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=l(null!==(g=null!==(B=null!==(b=null!==(v=null==t?void 0:t.weekStartsOn)&&void 0!==v?v:null==t||null===(w=t.locale)||void 0===w||null===(y=w.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==b?b:E.weekStartsOn)&&void 0!==B?B:null===(I=E.locale)||void 0===I||null===(k=I.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==g?g:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var L=d(n);if(!function(n){if(r(1,arguments),!function(n){return r(1,arguments),n instanceof Date||"object"===a(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=d(n);return!isNaN(Number(e))}(L))throw new RangeError("Invalid time value");var S=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(L),Y=function(n,e){return r(2,arguments),function(n,e){r(2,arguments);var t=d(n).getTime(),o=l(e);return new Date(t+o)}(n,-l(e))}(L,S),W={firstWeekContainsDate:D,weekStartsOn:M,locale:T,_originalDate:L};return x.match(_).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,P[e])(n,T.formatLong):n})).join("").match(Z).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(J))?a[1].replace(V,"'"):r;var d,l=j[i];if(l)return null!=t&&t.useAdditionalWeekYearTokens||(d=o,-1===N.indexOf(d))||U(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==F.indexOf(n)}(o)||U(o,e,String(n)),l(Y,o,T.localize,W);if(i.match(K))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}function nn(n){console.log("inside Display");const e=document.getElementById("todoContainer"),t=document.createElement("div");t.classList.add("addNewTodoDiv"),e.innerHTML="",n.forEach(((n,t)=>{const r=t;n.id=t;const a=document.createElement("div");a.classList.add("todoDiv"),a.setAttribute("id","todoDiv"),a.setAttribute("data-cell",r);const i=document.createElement("div");i.setAttribute("id","todoPriority"),i.classList.add("todoPriority"),"low"==n.priority?i.classList.add("low"):"med"==n.priority?i.classList.add("med"):"high"==n.priority&&i.classList.add("high");const d=document.createElement("input");d.setAttribute("type","checkbox"),d.setAttribute("id","todoCheckMark"),d.classList.add("todoCheckMark");const l=document.createElement("h5");l.classList.add("todoTitle"),l.innerHTML=n.title;const s=document.createElement("button");s.classList.add("todoDetails"),s.setAttribute("id","todoDetails"),s.innerHTML="Details";const A=document.createElement("h6");A.classList.add("dueDate"),A.innerHTML=$(new Date(n.dueDate),"MMM dd"),console.log($(new Date(2014,1,11),"MM/dd/yyyy"));const c=document.createElement("div");c.classList.add("todoEdit"),c.addEventListener("click",o);const u=document.createElement("div");u.classList.add("todoDelete"),u.setAttribute("id","todoDelete");const m=document.createElement("div");m.classList.add("todoDivLeft");const f=document.createElement("div");f.classList.add("todoDivCenter");const h=document.createElement("div");h.classList.add("todoDivRight"),m.appendChild(i),m.appendChild(d),f.appendChild(l),h.appendChild(s),h.appendChild(A),h.appendChild(c),h.appendChild(u),a.appendChild(m),a.appendChild(f),a.appendChild(h),e.appendChild(a)}));const r=document.createElement("button");r.classList.add("addNewTodo"),r.setAttribute("id","addNewTodo"),e.appendChild(t),t.appendChild(r),r.addEventListener("click",(()=>{!function(){console.log("addNewProjectForm");const n=document.createElement("div"),e=document.getElementById("todoContainer");n.classList.add("todoFormContainer"),n.id="todoFormContainer",n.innerHTML="";const t=document.createElement("div");t.classList.add("formHeader");const o=document.createElement("h2");o.textContent="Create New";const r=document.createElement("button");r.classList.add("closeForm"),r.id="closeForm",r.textContent="X",r.addEventListener("click",(function(n){n.target.parentNode.parentNode.classList.remove("showTodoForm"),n.target.parentNode.parentNode.innerHTML=""}));const a=document.createElement("form");a.action="",a.classList.add("todoForm"),a.id="todoForm";const i=document.createElement("ul");i.classList.add("formUl");const d=document.createElement("li");d.classList.add("formLi");const l=document.createElement("label");l.setAttribute("for","title");const s=document.createElement("input");s.type="text",s.id="title",s.placeholder="Title",s.required=!0;const A=document.createElement("li");A.classList.add("formLi");const c=document.createElement("label");c.setAttribute("for","description");const u=document.createElement("textarea");u.name="description",u.id="description",u.cols=10,u.rows=10,u.placeholder="Description",u.required=!0;const m=document.createElement("li");m.classList.add("formLi");const f=document.createElement("label");f.setAttribute("for","dueDateInput"),f.textContent="Due Date";const h=document.createElement("input");h.type="date",h.classList.add("dueDateInput"),h.id="dueDateInput",h.required=!0;const p=document.createElement("li");p.classList.add("formLi","formLi_footer");const C=document.createElement("div"),g=document.createElement("label");g.setAttribute("for","priority"),g.textContent="Priority";const B=document.createElement("select");B.name="priority",B.classList.add("priority"),B.id="priority",B.required=!0;const b=document.createElement("option");b.value="low",b.textContent="LOW";const v=document.createElement("option");v.value="med",v.textContent="MED";const w=document.createElement("option");w.value="high",w.textContent="HIGH";const y=document.createElement("button");y.type="submit",y.id="submit",y.classList.add("submit"),y.textContent="ADD",n.appendChild(t),n.appendChild(a),t.appendChild(o),t.appendChild(r),a.appendChild(i),i.appendChild(d),d.appendChild(l),d.appendChild(s),l.appendChild(document.createTextNode("")),i.appendChild(A),A.appendChild(c),A.appendChild(u),c.appendChild(document.createTextNode("")),i.appendChild(m),m.appendChild(f),m.appendChild(h),i.appendChild(p),p.appendChild(C),C.appendChild(g),B.appendChild(b),B.appendChild(v),B.appendChild(w),C.appendChild(B),p.appendChild(y),e.appendChild(n)}()}))}function en(n){const e=document.getElementById("projectsContainer");e.innerHTML="";const t=document.createElement("div");t.classList.add("projectFormContainer"),t.id="projectFormContainer",t.innerHTML="",n.forEach(((n,t)=>{const o=document.createElement("div");o.classList.add("projectsDiv"),o.setAttribute("id","projectDiv");const r=document.createElement("h2");r.classList.add("projectTitle"),r.setAttribute("id","projectTitle"),r.innerHTML=n.title,o.appendChild(r),e.append(o)}));const o=document.createElement("button");o.classList.add("addNewProject"),o.setAttribute("id","addNewProject"),e.appendChild(o),o.addEventListener("click",(()=>{!function(){const n=document.getElementById("projectsContainer"),e=document.createElement("div");e.classList.add("projectFormContainer"),e.id="projectFormContainer";const t=document.createElement("form");t.classList.add("projectForm"),t.setAttribute("id","projectForm");const o=document.createElement("input");o.setAttribute("type","text"),o.placeholder="Title",o.classList.add("projectFormName"),o.id="projectFormName",o.required=!0;const r=document.createElement("button");r.classList.add("addProject"),r.setAttribute("id","addProject"),r.type="submit",r.innerHTML="Add";const a=document.createElement("button");a.classList.add("cancelProject"),a.setAttribute("id","cancelProject"),a.innerHTML="Cancel",a.addEventListener("click",(function(n){n.preventDefault(),t.remove()}));const i=document.createElement("div");i.classList.add("projectButtonContainer"),t.appendChild(o),i.appendChild(r),i.appendChild(a),t.appendChild(i),e.appendChild(t),n.appendChild(e)}(),console.log("inside display projectsAddNewProject")}))}var tn=t(379),on=t.n(tn),rn=t(795),an=t.n(rn),dn=t(569),ln=t.n(dn),sn=t(565),An=t.n(sn),cn=t(216),un=t.n(cn),mn=t(589),fn=t.n(mn),hn=t(426),pn={};pn.styleTagTransform=fn(),pn.setAttributes=An(),pn.insert=ln().bind(null,"head"),pn.domAPI=an(),pn.insertStyleElement=un(),on()(hn.Z,pn),hn.Z&&hn.Z.locals&&hn.Z.locals;const Cn=[{title:"Home",todosArr:[{title:"Hello1",description:"This is short description",dueDate:"04/02/02",priority:"high"},{title:"Hello2",description:"This is short description",dueDate:"02/02/02",priority:"low"},{title:"Hello3",description:"This is short description",dueDate:"08/02/02",priority:"med"}]},{title:"ProjectOne",todosArr:[]}],gn=Cn[0].todosArr;let Bn="Home";nn(gn),en(Cn),todoContainer.addEventListener("click",(function(e){const t=e.target.id;if("todoDelete"==t){const n=e.target.parentNode.parentNode.attributes[2].value,t=Cn.findIndex((n=>n.title==Bn)),o=Cn[t].todosArr,r=o.findIndex((e=>e.id==n));o.splice(r,1),nn(o)}else if("todoDetails"==t){const n=e.target.parentNode.parentNode.attributes[2].value,t=gn.findIndex((e=>e.id==n));!function(n){const e=document.createElement("div");e.classList.add("detailsWindow"),e.classList.add("show"),e.setAttribute("id","detailsWindow");const t=document.createElement("div");t.classList.add("closeDetails"),t.innerHTML="X",t.addEventListener("click",(function(){e.classList.remove("show")}));const o=document.createElement("div");o.classList.add("detailsHeader");const r=document.createElement("h2");r.innerHTML=n.title,console.log(n.title);const a=document.createElement("h4");a.innerHTML=n.description;const i=document.createElement("h4");i.innerHTML=n.dueDate;const d=document.createElement("h4");d.innerHTML=n.priority,o.appendChild(r),o.appendChild(t),e.appendChild(o),e.appendChild(a),e.appendChild(i),e.appendChild(d),document.body.appendChild(e)}(gn[t])}else if("todoCheckMark"==t){const n=e.target.parentNode.parentNode.attributes[2].value;console.log(e.target.parentNode.parentNode.attributes[2]),function(n){const e='[data-cell="'+n+'"]';console.log(e);const t=document.querySelector(e);console.log(t),t.classList.contains("checked")?t.classList.remove("checked"):t.classList.contains("checked")||t.classList.add("checked")}(n)}else"addNewTodo"==t&&(todoFormContainer.classList.add("showTodoForm"),document.getElementById("todoForm").addEventListener("submit",(function(e){e.preventDefault();const t=document.getElementById("title").value,o=document.getElementById("description").value,r=document.getElementById("dueDateInput").value,a=document.getElementById("priority").value,i=new n(t,o,r,a);console.log(i);const d=Cn.findIndex((n=>n.title==Bn));Cn[d].todosArr.push(i),nn(Cn[d].todosArr),e.target.parentNode.innerHTML=""})))})),projectsContainer.addEventListener("click",(function(n){const t=n.target.id;if("projectTitle"==t){const e=n.target.innerHTML;Bn=e;const t=Cn.findIndex((n=>n.title==e));nn(Cn[t].todosArr)}else"addNewProject"==t&&document.getElementById("projectForm").addEventListener("submit",(function(n){n.preventDefault();const t=document.getElementById("projectFormName"),o=new e(t.value);Cn.push(o),en(Cn)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,